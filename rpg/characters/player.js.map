{"version":3,"file":"player.js","sourceRoot":"","sources":["player.ts"],"names":[],"mappings":"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","sourcesContent":["const readline = require('readline-sync');\nconst dice = require('../dice/dice.js');\n\nenum Class {\n  Barbarian = 'BARBARIAN',\n  Bard = 'BARD',\n  Cleric = 'CLERIC',\n  Druid = 'DRUID',\n  Fighter = 'FIGHTER',\n  Monk = 'MONK',\n  Paladin = 'PALADIN',\n  Ranger = 'RANGER',\n  Rogue = 'ROGUE',\n  Sorcerer = 'SORCERER',\n  Wizard = 'WIZARD',\n}\n\nenum Race {\n  Dwarf = 'DWARF',\n  Elf = 'ELF',\n  Gnome = 'GNOME',\n  Half_Elf = 'HALF-ELF',\n  Halfling = 'HALFLING',\n  Half_Orc = 'HALF-ORC',\n  Human = 'HUMAN'\n}\n\nclass PlayerCharacter {\n  name: string;\n  chosen_class: Class;\n  race: Race;\n  stats: any = {\n    str: 0,\n    con: 0,\n    dex: 0,\n    int: 0,\n    wis: 0,\n    cha: 0,\n    luck: 0\n  };\n  statmod: any = Object.assign({}, this.stats);\n\n  static AVERAGE: number = 10; // Import from character\n  \n  constructor(name: string, chosenClass: Class, race: Race) {\n    this.name = name;\n    this.chosen_class = chosenClass;\n    this.race = race;\n  }\n\n  setstat(\n    value: any & {\n      str: number,\n      con: number,\n      dex: number,\n      int: number,\n      wis: number,\n      cha: number,\n      luck?: number\n    }) {\n      for (const val in value) {\n        this.stats[val] = value[val];\n        let n = this.stats[val] - PlayerCharacter.AVERAGE;\n        this.statmod[val] = Math.floor(Math.abs(n) / 2) * Math.sign(n);\n      }\n  }\n\n  chooseStats(): void {\n    let initialStats = [];\n    for (const i in this.stats) {\n      let stat = new dice.DiceRoll(4, 6, 0, {discard: 'least'}).roll();\n      if (i === 'luck') {\n        this.stats.luck = stat;\n      } else {initialStats.push(stat)}\n      this.stats[i] = stat;\n    }\n\n    console.log('The stats are Strength (STR), Constitution (CON), Dexterity (DEX), Intelligence (INT), Wisdom (WIS), and Charisma (CHA).');\n    console.log('Think of STR as your strength, brute force, athletic skill, etc.');\n    console.log('Think of CON as your health and resistance.');\n    console.log('Think of DEX as your agility, swiftness, stealth, balance, etc.');\n    console.log('Think of INT as your \\\"book smarts\\\", mental recall, and logic.');\n    console.log('Think of WIS as your perception.');\n    console.log('Think of CHA as your persuasivenes, way with words, etc.');\n    console.log('Each stat will have an ability score, which will determine any bonuses or penalties your character has in that area.');\n    console.log(`Your ability scores are:\\n${initialStats}\\n`);\n    console.log('Enter a number (1-6) or RESET to reset stat sleection.');\n\n    let copyStats = Object.assign({}, this.stats);\n    let allStats: string[] = Object.keys(this.stats);\n    let current: number = 0;\n    let arr: number[] = Object.values(this.stats);\n   \n    while (true) {\n      if (current === 6) {break;}\n  \n      let val: string | number = readline.question(`${allStats[current].toUpperCase()}: `);\n  \n      if (val === 'RESET') {\n        current = 0;\n        copyStats = Object.assign({}, this.stats);\n        arr = Object.values(this.stats);\n        console.log('---RESET---');\n      } else if (isNaN(Number(val))) {\n        console.log('Enter a number from 1 to 6.');\n      } else {  \n        val = Number(val);  \n        if (val < 1 || val > 6) {\n          console.log('Enter a number from 1 to 6.');\n        } else if (arr[val - 1] === 0) {\n          console.log('Enter a number you have not previously entered.');\n        } else {\n          copyStats[allStats[current]] = this.stats[allStats[val - 1]];\n          arr[val - 1] = 0;\n          console.log(`Set ${allStats[current].toUpperCase()} to ${copyStats[allStats[current]]}. You used ${val}.`);\n          current++;\n        }\n      }\n    }\n    this.stats = Object.assign({}, copyStats);\n    console.log('Your stats are...');\n    for (let i in this.stats) {\n      console.log(`${i.toUpperCase()}: ${this.stats[i]}`);\n    }\n  }\n\n\n\n}\n\nmodule.exports.PlayerCharacter = PlayerCharacter;"]}
